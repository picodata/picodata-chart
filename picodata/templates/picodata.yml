{{- range $tier, $tier_map :=  $.Values.picodata.tiers }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $tier_map.tierName }}-{{ include "picodata.fullname" $ }}
  namespace: {{ $.Release.Namespace | default "default" }}
  labels:
    app.kubernetes.io/name: {{ $tier_map.tierName }}-{{ include "picodata.fullname" $ }}
    app.kubernetes.io/cluster: {{ $.Values.clusterName }}
    app.kubernetes.io/version: {{ $.Chart.AppVersion | quote }}
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
spec:
  {{- if not $.Values.picodata.autoscaling.enabled }}
  replicas: {{ .replicas }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $tier_map.tierName }}-{{ include "picodata.fullname" $ }}
  serviceName: {{ $tier_map.tierName }}-{{ include "picodata.fullname" $ }}-interconnect
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ include "picodata.httpTargetPort" $ | quote }}
        checksum/config: {{ include (print $.Template.BasePath "/cm.yml") $ | sha256sum }}
      {{- with $.Values.picodata.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app.kubernetes.io/name: {{ $tier_map.tierName }}-{{ include "picodata.fullname" $ }}
    spec:
      {{- with $.Values.picodata.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "picodata.serviceAccountName" $ }}
      {{- with $.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ include "picodata.fullname" $ }}
          image: {{ $.Values.image.repository }}/{{ $.Values.image.tag }}
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          ports:
            {{- range $i, $value := $.Values.picodata.service.ports }}
            - name: {{ $value.name }}
              containerPort: {{ $value.targetPort }}
              protocol: {{ $value.protocol }}
            {{- end }}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: INSTANCE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: INSTANCE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: PICODATA_IPROTO_LISTEN
              value: $(INSTANCE_NAME):{{ include "picodata.binaryTargetPort" $ }}
            - name: PICODATA_IPROTO_ADVERTISE
              value: $(INSTANCE_NAME).{{ $tier_map.tierName }}-{{ include "picodata.fullname" $ }}-interconnect.{{ $.Release.Namespace }}.svc.cluster.local:{{ include "picodata.binaryTargetPort" $ }}
            - name: PICODATA_FAILURE_DOMAIN
              value: HOST=$(INSTANCE_NAME)
            - name: PICODATA_PG_LISTEN
              value: $(INSTANCE_NAME):{{ include "picodata.psqlTargetPort" $ }}
            - name: PICODATA_CONFIG_FILE
              value: {{ $.Values.picodata.instanceDir }}/config.yaml
            - name: PICODATA_ADMIN_SOCK
              value: {{ $.Values.picodata.instanceDir }}/admin.sock
            {{- range $tier_map.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          {{- with $.Values.picodata.startupProbe }}
          startupProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $.Values.picodata.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $.Values.picodata.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $tier_map.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if $.Values.picodata.volumes }}
          volumeMounts:
            - name: pico-conf
              mountPath: {{ $.Values.picodata.instanceDir }}/config.yaml
              subPath: config.yaml
            {{- range $.Values.picodata.volumes }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
            {{- end }}
          {{- end }}
      {{- with $.Values.picodata.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $tier_map.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.picodata.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.picodata.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: pico-conf
        configMap:
          name: {{ $tier_map.tierName }}-{{ include "picodata.fullname" $ }}
          items:
            - key: config.yaml
              path: config.yaml
  {{- if $.Values.picodata.volumes }}
  volumeClaimTemplates:
    {{- range $.Values.picodata.volumes }}
    - metadata:
        name: {{ .name | default "pvc" }}
        namespace: {{ $.Release.Namespace | default "default" }}
      spec:
        {{- if .storageClassName }}
        storageClassName: {{ .storageClassName }}
        {{- end }}
        {{- with .accessModes }}
        accessModes:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- if .volumeMode }}
        volumeMode: {{ .volumeMode }}
        {{- end }}
        resources:
          requests:
            storage: {{ $tier_map.diskSize | default "2Gi" }}
    {{- end }}
  {{- end }}
{{- end }}
